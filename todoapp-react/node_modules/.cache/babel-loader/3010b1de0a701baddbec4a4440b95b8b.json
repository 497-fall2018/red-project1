{"ast":null,"code":"import _objectSpread from \"/Users/andreskim/Desktop/EECS497/TODO_APP/todoapp-react/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/andreskim/Desktop/EECS497/TODO_APP/todoapp-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// Import the TodoAction Creators and TodoActionTypes\nimport * as TodoActions from '../actions/todoActions'; // We are dividing the reducers using a technique called Reducer composition.\n// By doing this we are seperating the reducer for the Collection and the Individual Item\n//The collection Reducer, It handles only the collection\n\nexport function TodoListReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    // The cases ordered in CRUD order.\n    // Create\n    case TodoActions.CREATE_TODO_SUCCESS:\n      {\n        return _toConsumableArray(state).concat([action.todo]);\n      }\n    //Read\n\n    case TodoActions.GET_TODOS_SUCCESS:\n      {\n        return action.todos.data.data.docs;\n      }\n    // The following Cases handle the data by mapping it. Mostly because they are related with the modification of a single Data\n    //Update\n\n    case TodoActions.START_EDITING:\n      {\n        return state.map(function (s) {\n          return todo(s, action);\n        });\n      }\n\n    case TodoActions.CANCEL_EDITING:\n      {\n        return state.map(function (s) {\n          return todo(s, action);\n        });\n      }\n\n    case TodoActions.UPDATE_TODO:\n      {\n        return state.map(function (s) {\n          return todo(s, action);\n        });\n      }\n\n    case TodoActions.UPDATE_TODO_SUCCESS:\n      {\n        return state.map(function (s) {\n          return todo(s, action);\n        });\n      }\n    //Delete\n\n    case TodoActions.DELETE_TODO:\n      {\n        return state.map(function (s) {\n          return todo(s, action);\n        });\n      }\n\n    case TodoActions.DELETE_TODO_SUCCESS:\n      {\n        return state.filter(function (s) {\n          return todo(s, action);\n        });\n      }\n\n    default:\n      return state;\n  }\n} //The individual Reducer. It handles only one Todo Object.\n\nvar todo = function todo(state, action) {\n  // If the mapped todo of the previous state matches with the new ID of the action,\n  // Only then proceed to the Reducer Switch case\n  if (state._id != (action._id || action.todo._id)) {\n    return state;\n  }\n\n  switch (action.type) {\n    // Edit/modifies the individual Todos using ES6 spread operator. The cases are self explanatory.\n    case TodoActions.START_EDITING:\n      {\n        return _objectSpread({}, state, {\n          editing: true\n        });\n      }\n\n    case TodoActions.CANCEL_EDITING:\n      {\n        return _objectSpread({}, state, {\n          editing: false\n        });\n      }\n\n    case TodoActions.UPDATE_TODO:\n      {\n        return _objectSpread({}, state, {\n          editing: false,\n          updating: true\n        });\n      }\n\n    case TodoActions.UPDATE_TODO_SUCCESS:\n      {\n        return _objectSpread({}, state, action.todo, {\n          updating: false\n        });\n      }\n\n    case TodoActions.DELETE_TODO:\n      {\n        return _objectSpread({}, state, {\n          deleting: true\n        });\n      }\n\n    case TodoActions.DELETE_TODO_SUCCESS:\n      {\n        return false;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"sources":["/Users/andreskim/Desktop/EECS497/TODO_APP/todoapp-react/src/todos/reducers/todoReducer.js"],"names":["TodoActions","TodoListReducer","state","action","type","CREATE_TODO_SUCCESS","todo","GET_TODOS_SUCCESS","todos","data","docs","START_EDITING","map","s","CANCEL_EDITING","UPDATE_TODO","UPDATE_TODO_SUCCESS","DELETE_TODO","DELETE_TODO_SUCCESS","filter","_id","editing","updating","deleting"],"mappings":"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","sourcesContent":["\n// Import the TodoAction Creators and TodoActionTypes\n\nimport * as TodoActions from '../actions/todoActions'\n\n\n\n// We are dividing the reducers using a technique called Reducer composition.\n// By doing this we are seperating the reducer for the Collection and the Individual Item\n\n\n//The collection Reducer, It handles only the collection\n\nexport function TodoListReducer(state = [], action) {\n    switch (action.type) {\n\n        // The cases ordered in CRUD order.\n\n        // Create\n        case TodoActions.CREATE_TODO_SUCCESS: {\n                return [\n                    ...state,\n                    action.todo\n                ];\n        }\n\n        //Read\n        case TodoActions.GET_TODOS_SUCCESS: {\n\n            return action.todos.data.data.docs;\n\n        }\n\n        // The following Cases handle the data by mapping it. Mostly because they are related with the modification of a single Data\n\n        //Update\n        case TodoActions.START_EDITING: {\n\n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.CANCEL_EDITING: {\n\n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.UPDATE_TODO: {\n\n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.UPDATE_TODO_SUCCESS: {\n\n            return state.map(s => todo(s, action))\n\n        }\n\n        //Delete\n        case TodoActions.DELETE_TODO: {\n\n            return state.map(s => todo(s, action))\n\n        }\n        case TodoActions.DELETE_TODO_SUCCESS: {\n\n            return state.filter(s => todo(s, action))\n\n        }\n\n        default:\n            return state\n    }\n}\n\n\n//The individual Reducer. It handles only one Todo Object.\n\n\nconst todo = (state, action) => {\n\n    // If the mapped todo of the previous state matches with the new ID of the action,\n    // Only then proceed to the Reducer Switch case\n\n    if (state._id != (action._id || action.todo._id)) {\n        return state;\n    }\n\n    switch (action.type) {\n\n        // Edit/modifies the individual Todos using ES6 spread operator. The cases are self explanatory.\n\n        case TodoActions.START_EDITING:\n            {\n                return {\n                    ...state,\n                    editing: true\n                }\n            }\n\n        case TodoActions.CANCEL_EDITING:\n            {\n                return {\n                    ...state,\n                    editing: false\n                }\n            }\n\n        case TodoActions.UPDATE_TODO:\n            {\n                return {\n                    ...state,\n                    editing: false,\n                    updating: true\n                }\n            }\n\n        case TodoActions.UPDATE_TODO_SUCCESS:\n            {\n                return {\n                    ...state,\n                    ...action.todo,\n                    updating: false\n                }\n            }\n\n        case TodoActions.DELETE_TODO:\n            {\n                return {\n                    ...state,\n                    deleting: true\n                }\n            }\n\n        case TodoActions.DELETE_TODO_SUCCESS:\n            {\n                return false\n            }\n\n        default:\n            {\n                return state;\n            }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}